{
  "prog": {
    "lm": null,
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "code": "# Write your solution here.\n\n# Defining the dictionary constant\n\ncmd_fn = {\n\n    '!hello': bot_hello, '!shout': bot_shout, '!count': bot_count,\n\n    '!divide':bot_divide, '!topic': bot_topic}\n\n\n\n# DEfining the dispatch_bot_command\n\n\n\ndef dispatch_bot_command(cmd, payload):\n\n  if cmd in cmd_fn.keys():\n\n    cmd_fn[cmd](payload)\n\n  else:\n\n    bot_say(f\"Unknown command {cmd}\")\n\n\n\n\n\n\n\ndispatch_bot_command('!hello', [])     #=> Chatbot: Hello world!\n\ndispatch_bot_command('!shout', ['5'])\n\ndispatch_bot_command('!count', ['11','7'])\n\ndispatch_bot_command('!divide', ['1.5', '5'])\n\ndispatch_bot_command('!topic', [])  #=> Chatbot: Topic 5: Functions and Objects\n\ndispatch_bot_command('!fake', [])      #=> Chatbot: Unknown command !fake",
        "answer_code": "BOT_COMMANDS = {\n    '!hello': bot_hello,\n    '!shout': bot_shout,\n    '!divide': bot_divide,\n    '!count': bot_count,\n    '!topic': bot_topic,\n}\n\ndef dispatch_bot_command(command, payload):\n    if command in BOT_COMMANDS:\n        function = BOT_COMMANDS[command]\n        function(payload)\n    else:\n        bot_say(f'Unknown command: {command}')\n\ndispatch_bot_command('!topic', ['5'])",
        "question_text": "### Task 6: Chatbot command processor (15 marks)\n\nNow that we have a few different chatbot command behaviours implemented, let's start tying everything together. We will do this in two parts. In this task, we will write a function which *dispatches* commands. That is, it looks at a command and determines which bot function to call. In the next task, we will use this function to build a simple simulated chat system with user input.\n\nFirstly, create a dictionary constant which associates command names (strings) with function objects (command behaviours). For example, the key\/value for the hello command should be `'!hello': bot_hello`. Importantly, the value should be the function name only (no brackets afterwards), otherwise Python will attempt to call the function during definition of the dictionary. There should be five commands in total from previous tasks.\n\nNext, define a function called `dispatch_bot_command`. This function should have two parameters: the first is the name of the command (e.g. `\"!shout\"`), and the second is the payload (e.g. `[\"i\", \"love\", \"python\"]`). The code inside the function should check whether the command is in the dictionary constant. If it is, it should call the associated function. If it is not, the bot should say \"Unknown command\" and the name of the unrecognised command.\n\n_Hint: A function can be stored in a variable (or dictionary) just like any other kind of object, and can be called using that variable name instead of the function name. So if you retrieve a function from a dictionary and store it in a variable called `my_function`, you can call it using `my_function(...)`._\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\ndispatch_bot_command('!hello', [])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Hello world!\n<\/font>\n\n```python\ndispatch_bot_command('!topic', ['5'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Topic 5: Functions and Objects\n<\/font>\n\n```python\ndispatch_bot_command('!fake', [])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Unknown command !fake\n<\/font>\n\n#### Criteria\n\n- Correct definition of the dictionary constant. (5 marks)\n- Correct function definition. (2 marks)\n- Correct function behaviour. (4 marks)\n- Function uses the dictionary to look up the function object associated with a command name. (2 marks)\n- Appropriate output is produced for unknown commands. (2 marks)\n\n#### Your Solution\n\n# Write your solution here.\n\n\ndispatch_bot_command('!hello', [])     #=> Chatbot: Hello world!\ndispatch_bot_command('!topic', ['5'])  #=> Chatbot: Topic 5: Functions and Objects\ndispatch_bot_command('!fake', [])      #=> Chatbot: Unknown command !fake",
        "subquestion": "Function uses the dictionary to look up the function object associated with a command name",
        "rationale": "In this case, the code snippet correctly defines a dictionary constant associating command names with function objects and uses this dictionary to look up the function object associated with a command name in the `dispatch_bot_command` function. It correctly calls the associated function if the command is recognized and outputs the appropriate message for unknown commands.\n\nThe code snippet demonstrates the correct implementation of the subquestion aspect.",
        "student_mark_out_of_10": "10"
      },
      {
        "augmented": true,
        "code": "# Write your solution here.\n\nFunction_Dict = {\n\n    '!hello': bot_hello,\n\n    '!shout': bot_shout,\n\n    '!divide': bot_divide,\n\n    '!count': bot_count,\n\n    '!topic': bot_topic\n\n}\n\n\n\ndef dispatch_bot_command(command, payload):\n\n  if command not in Function_Dict:\n\n    bot_say(f'Unknown command {command}')\n\n  else:\n\n    Function_Dict[command](payload)\n\n\n\n\n\ndispatch_bot_command('!hello', [])     #=> Chatbot: Hello world!\n\ndispatch_bot_command('!topic', ['5'])  #=> Chatbot: Topic 5: Functions and Objects\n\ndispatch_bot_command('!fake', [])      #=> Chatbot: Unknown command !fake\n",
        "answer_code": "BOT_COMMANDS = {\n    '!hello': bot_hello,\n    '!shout': bot_shout,\n    '!divide': bot_divide,\n    '!count': bot_count,\n    '!topic': bot_topic,\n}\n\ndef dispatch_bot_command(command, payload):\n    if command in BOT_COMMANDS:\n        function = BOT_COMMANDS[command]\n        function(payload)\n    else:\n        bot_say(f'Unknown command: {command}')\n\ndispatch_bot_command('!topic', ['5'])",
        "question_text": "### Task 6: Chatbot command processor (15 marks)\n\nNow that we have a few different chatbot command behaviours implemented, let's start tying everything together. We will do this in two parts. In this task, we will write a function which *dispatches* commands. That is, it looks at a command and determines which bot function to call. In the next task, we will use this function to build a simple simulated chat system with user input.\n\nFirstly, create a dictionary constant which associates command names (strings) with function objects (command behaviours). For example, the key\/value for the hello command should be `'!hello': bot_hello`. Importantly, the value should be the function name only (no brackets afterwards), otherwise Python will attempt to call the function during definition of the dictionary. There should be five commands in total from previous tasks.\n\nNext, define a function called `dispatch_bot_command`. This function should have two parameters: the first is the name of the command (e.g. `\"!shout\"`), and the second is the payload (e.g. `[\"i\", \"love\", \"python\"]`). The code inside the function should check whether the command is in the dictionary constant. If it is, it should call the associated function. If it is not, the bot should say \"Unknown command\" and the name of the unrecognised command.\n\n_Hint: A function can be stored in a variable (or dictionary) just like any other kind of object, and can be called using that variable name instead of the function name. So if you retrieve a function from a dictionary and store it in a variable called `my_function`, you can call it using `my_function(...)`._\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\ndispatch_bot_command('!hello', [])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Hello world!\n<\/font>\n\n```python\ndispatch_bot_command('!topic', ['5'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Topic 5: Functions and Objects\n<\/font>\n\n```python\ndispatch_bot_command('!fake', [])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Unknown command !fake\n<\/font>\n\n#### Criteria\n\n- Correct definition of the dictionary constant. (5 marks)\n- Correct function definition. (2 marks)\n- Correct function behaviour. (4 marks)\n- Function uses the dictionary to look up the function object associated with a command name. (2 marks)\n- Appropriate output is produced for unknown commands. (2 marks)\n\n#### Your Solution\n\n# Write your solution here.\n\n\ndispatch_bot_command('!hello', [])     #=> Chatbot: Hello world!\ndispatch_bot_command('!topic', ['5'])  #=> Chatbot: Topic 5: Functions and Objects\ndispatch_bot_command('!fake', [])      #=> Chatbot: Unknown command !fake",
        "subquestion": "Appropriate output is produced for unknown commands",
        "rationale": "produce the student_mark_out_of_10. We first check if the command is in the dictionary of functions. If it is, we call the associated function. If not, we output \"Unknown command\" followed by the unrecognized command. The code snippet provided correctly implements this logic, producing the expected output for both known and unknown commands.",
        "student_mark_out_of_10": "10"
      }
    ],
    "signature_instructions": "Grade a code snippet according to how well it answers a question and subquestion aspect on a scale of 0-10. Use the gold standard to guide your grading. ",
    "signature_prefix": "Student Mark Out Of 10:",
    "extended_signature_instructions": "Evaluate the provided code snippet based on its accuracy in addressing the question and subquestion aspects, assigning a score from 0 to 10 according to the gold standard.",
    "extended_signature_prefix": "`Grade:`"
  }
}