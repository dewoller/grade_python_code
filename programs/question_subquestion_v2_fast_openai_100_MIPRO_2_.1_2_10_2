{
  "prog": {
    "lm": null,
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "code": "# Write your solution here.\n\ndictionary={'!hello': bot_hello,'!shout': bot_shout,'!divide': bot_divide,'!count': bot_count,'!topic': bot_topic}\n\ndef dispatch_bot_command(name,payload):\n\n    if name in dictionary.keys():\n\n      a=dictionary[name]\n\n      a(payload)\n\n    else:\n\n      bot_say('Unknown command '+name)\n\n\n\n\n\n\n\ndispatch_bot_command('!hello', [])     #=> Chatbot: Hello world!\n\ndispatch_bot_command('!topic', ['5'])  #=> Chatbot: Topic 5: Functions and Objects\n\ndispatch_bot_command('!fake', [])      #=> Chatbot: Unknown command !fake",
        "question_text": "### Task 6: Chatbot command processor (15 marks)\n\nNow that we have a few different chatbot command behaviours implemented, let's start tying everything together. We will do this in two parts. In this task, we will write a function which *dispatches* commands. That is, it looks at a command and determines which bot function to call. In the next task, we will use this function to build a simple simulated chat system with user input.\n\nFirstly, create a dictionary constant which associates command names (strings) with function objects (command behaviours). For example, the key\/value for the hello command should be `'!hello': bot_hello`. Importantly, the value should be the function name only (no brackets afterwards), otherwise Python will attempt to call the function during definition of the dictionary. There should be five commands in total from previous tasks.\n\nNext, define a function called `dispatch_bot_command`. This function should have two parameters: the first is the name of the command (e.g. `\"!shout\"`), and the second is the payload (e.g. `[\"i\", \"love\", \"python\"]`). The code inside the function should check whether the command is in the dictionary constant. If it is, it should call the associated function. If it is not, the bot should say \"Unknown command\" and the name of the unrecognised command.\n\n_Hint: A function can be stored in a variable (or dictionary) just like any other kind of object, and can be called using that variable name instead of the function name. So if you retrieve a function from a dictionary and store it in a variable called `my_function`, you can call it using `my_function(...)`._\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\ndispatch_bot_command('!hello', [])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Hello world!\n<\/font>\n\n```python\ndispatch_bot_command('!topic', ['5'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Topic 5: Functions and Objects\n<\/font>\n\n```python\ndispatch_bot_command('!fake', [])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Unknown command !fake\n<\/font>\n\n#### Criteria\n\n- Correct definition of the dictionary constant. (5 marks)\n- Correct function definition. (2 marks)\n- Correct function behaviour. (4 marks)\n- Function uses the dictionary to look up the function object associated with a command name. (2 marks)\n- Appropriate output is produced for unknown commands. (2 marks)\n\n#### Your Solution\n\n# Write your solution here.\n\n\ndispatch_bot_command('!hello', [])     #=> Chatbot: Hello world!\ndispatch_bot_command('!topic', ['5'])  #=> Chatbot: Topic 5: Functions and Objects\ndispatch_bot_command('!fake', [])      #=> Chatbot: Unknown command !fake",
        "subquestion": "Function uses the dictionary to look up the function object associated with a command name",
        "rationale": "In this code snippet, the `dispatch_bot_command` function correctly uses the dictionary to look up the function object associated with a command name. It checks if the command is in the dictionary and calls the associated function if it is, otherwise it outputs \"Unknown command\" followed by the unrecognized command.",
        "student_mark_out_of_10": "10"
      },
      {
        "augmented": true,
        "code": "def bot_count(payload):\n\n    # Convert elements in the payload to appropriate types\n\n    start = 1 if len(payload) == 1 else int(payload[0])\n\n    count = int(payload[0]) if len(payload) == 1 else int(payload[1])\n\n\n\n    # Use a loop to repeatedly call bot_say()\n\n    for i in range(start, start + count):\n\n        # Display the current number using bot_say()\n\n        bot_say(i)\n\n\n\n# Test calls\n\nbot_count(['10', '3'])  #=> Chatbot: 10, Chatbot: 11, Chatbot: 12\n\nprint(\"NEXT\")\n\nbot_count(['2'])        #=> Chatbot: 1, Chatbot: 2\n\nprint(\"NEXT\")\n\nbot_count(['5'])        #=> Chatbot: 1, Chatbot: 2, Chatbot: 3, Chatbot: 4, Chatbot: 5\n\n\n",
        "question_text": "### Task 4: Chatbot !count command (12 marks)\n\nImplement the behaviour for a `!count` chatbot command. Like `!divide`, you may assume that the user always provides two numbers. However, in this case they will also be whole numbers. The first of these numbers represents the value to start counting from. The second number represents how many times to count. The bot always counts by ones in ascending order (e.g. 2, 3, 4, 5 when starting at 2 and counting 4 times).\n\nIf the payload contains only one number, that number represents how many times to count and the bot should count up from 1. I recommend solving the task without this feature first, and then adding it afterwards.\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\nbot_count(['10', '3'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;10\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;11\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;12\n<\/font>\n\n```python\nbot_count(['2'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;1\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;2\n<\/font>\n\n#### Criteria\n\n- Correct function definition. (2 marks)\n- Converts elements in the payload to an appropriate type. (2 marks)\n- Uses a loop to repeatedly call `bot_say()`. (2 marks)\n- The loop repeats the correct number of times. (2 marks)\n- The correct numbers are displayed, with one number per chatbot message. (2 marks)\n- The bot correctly counts up from one when only a single value is provided in the payload. (2 marks)",
        "subquestion": "The bot correctly counts up from one when only a single value is provided in the payload",
        "rationale": "produce the student_mark_out_of_10. We first need to check if the payload contains only one number. If it does, the bot should start counting from 1. The code snippet correctly handles this scenario by setting the start variable to 1 when the length of the payload is 1. It then uses a loop to count up from the start value. The bot_say() function is called for each number in the correct order. Therefore, the code snippet effectively implements the behavior of counting up from 1 when only a single value is provided in the payload.",
        "student_mark_out_of_10": "10"
      },
      {
        "augmented": true,
        "code": "# Write your solution here.\n\nCOMMANDS = {\n\n    '!hello': bot_hello,\n\n    '!shout': bot_shout,\n\n    '!divide': bot_divide,\n\n    '!count': bot_count,\n\n    '!topic': bot_topic\n\n}\n\n\n\ndef dispatch_bot_command(command, payload):\n\n    if command in COMMANDS:\n\n        COMMANDS[command](payload)\n\n    else:\n\n        bot_say(f\"Unknown command {command}\")\n\n\n\ndispatch_bot_command('!hello', [])     #=> Chatbot: Hello world!\n\ndispatch_bot_command('!topic', ['5'])  #=> Chatbot: Topic 5: Functions and Objects\n\ndispatch_bot_command('!fake', [])      #=> Chatbot: Unknown command !fake",
        "question_text": "### Task 6: Chatbot command processor (15 marks)\n\nNow that we have a few different chatbot command behaviours implemented, let's start tying everything together. We will do this in two parts. In this task, we will write a function which *dispatches* commands. That is, it looks at a command and determines which bot function to call. In the next task, we will use this function to build a simple simulated chat system with user input.\n\nFirstly, create a dictionary constant which associates command names (strings) with function objects (command behaviours). For example, the key\/value for the hello command should be `'!hello': bot_hello`. Importantly, the value should be the function name only (no brackets afterwards), otherwise Python will attempt to call the function during definition of the dictionary. There should be five commands in total from previous tasks.\n\nNext, define a function called `dispatch_bot_command`. This function should have two parameters: the first is the name of the command (e.g. `\"!shout\"`), and the second is the payload (e.g. `[\"i\", \"love\", \"python\"]`). The code inside the function should check whether the command is in the dictionary constant. If it is, it should call the associated function. If it is not, the bot should say \"Unknown command\" and the name of the unrecognised command.\n\n_Hint: A function can be stored in a variable (or dictionary) just like any other kind of object, and can be called using that variable name instead of the function name. So if you retrieve a function from a dictionary and store it in a variable called `my_function`, you can call it using `my_function(...)`._\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\ndispatch_bot_command('!hello', [])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Hello world!\n<\/font>\n\n```python\ndispatch_bot_command('!topic', ['5'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Topic 5: Functions and Objects\n<\/font>\n\n```python\ndispatch_bot_command('!fake', [])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Unknown command !fake\n<\/font>\n\n#### Criteria\n\n- Correct definition of the dictionary constant. (5 marks)\n- Correct function definition. (2 marks)\n- Correct function behaviour. (4 marks)\n- Function uses the dictionary to look up the function object associated with a command name. (2 marks)\n- Appropriate output is produced for unknown commands. (2 marks)\n\n#### Your Solution\n\n# Write your solution here.\n\n\ndispatch_bot_command('!hello', [])     #=> Chatbot: Hello world!\ndispatch_bot_command('!topic', ['5'])  #=> Chatbot: Topic 5: Functions and Objects\ndispatch_bot_command('!fake', [])      #=> Chatbot: Unknown command !fake",
        "subquestion": "Function uses the dictionary to look up the function object associated with a command name",
        "rationale": "In this case, the code snippet correctly defines a dictionary constant associating command names with function objects and uses this dictionary to look up the function object associated with a command name in the `dispatch_bot_command` function. It also handles unknown commands appropriately by outputting \"Unknown command\" followed by the unrecognized command.",
        "student_mark_out_of_10": "10"
      },
      {
        "augmented": true,
        "code": "# Add your import statement here.\n\nimport random\n\n#list constant containg the names of the 12 topics\n\nTOPICS = [\n\n    \"Algorithms and Flowcharts\",\n\n    \"Statements and Expressions\",\n\n    \"Booleans and Conditional Execution\",\n\n    \"Iteration\",\n\n    \"Functions and Objects\",\n\n    \"Strings and Files\",\n\n    \"Data Structures\",\n\n    \"Software Errors\",\n\n    \"Using Modules\",\n\n    \"Structuring and Documenting Code\",\n\n    \"Algorithm Design Strategies\",\n\n    \"Revison\"\n\n    ]\n\n\n\ndef bot_topic (payload):\n\n\n\n    if not payload:\n\n       topic_number = random.randint(1, 12)\n\n\n\n    else:\n\n       topic_number = int(payload[0])\n\n\n\n    topic_name = TOPICS[topic_number - 1]\n\n\n\n    bot_say(f\"Topic {topic_number} : {topic_name}\")\n\n\n\nbot_topic(['1'])  #=> Chatbot: Topic 1: Algorithms and Flowcharts\n\nbot_topic(['9'])     #=> Random. For example, Chatbot: Topic 7: Data Structures",
        "question_text": "### Task 5: Chatbot !topic command (15 marks)\n\nImplement behaviour for a `!topic` command which displays the name of one of the twelve topics in CSE1PE\/PES.\n\nYou can find the topic names by referring to the Subject Learning Guide or the weekly sections on LMS. For example, the name of topic 1 is \"Algorithms and Flowcharts\". You will need to define a list constant which contains all of the topic names in order. You are _not_ to include the word \"Topic\" or the topic numbers in the list (i.e. do not put \"Topic 1: Algorithms and Flowcharts\" in the list, put \"Algorithms and Flowcharts\" instead). The topic number should be added dynamically by the program instead (per the flowchart).\n\nThe behaviour of the `!topic` command is described in the flowchart below. Your solution should implement this algorithm as closely as possible.\n\n\nNote that one of the steps the flowchart involves generating a random number. You must import and make use of the `random` module from the Python Standard Library to do this. Consult [the documentation for the `random` module](https:\/\/docs.python.org\/3\/library\/random.html) and select an appropriate function to use for this part of your solution. For information about importing modules, refer to Topic 9.\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\nbot_topic(['1'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Topic 1: Algorithms and Flowcharts\n<\/font>\n\n```python\nbot_topic([])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Topic 7: Data Structures\n<\/font>\n\n(Note: for this last example the selected topic is meant to be random, so your code should display different topics across different runs).\n\n#### Criteria\n\n- Correct definition of the list constant. (4 marks)\n- Correct function definition. (2 marks)\n- Generates a random number in the correct range using the `random` module. (3 marks)\n- Indexes the list constant correctly to get the topic name. (2 marks)\n- Program behaviour otherwise matches the flowchart. (4 marks)\n\n#### Your Solution\n\n# Add your import statement here.\n\n# Define your constant here.\n\n# Write your bot_topic() function here.\n\n\nbot_topic(['1'])  #=> Chatbot: Topic 1: Algorithms and Flowcharts\nbot_topic([])     #=> Random. For example, Chatbot: Topic 7: Data Structures",
        "subquestion": "Program behaviour otherwise matches the flowchart",
        "rationale": "produce the student_mark_out_of_10. We need to ensure that the program behavior aligns with the provided flowchart. The code snippet correctly defines the list constant, imports the random module, generates a random number within the correct range, and indexes the list constant to get the topic name. The output matches the expected format and behavior as described in the question.",
        "student_mark_out_of_10": "10"
      },
      {
        "augmented": true,
        "code": "commands = {\n\n    '!shout': bot_shout,\n\n    '!divide': bot_divide,\n\n    '!count': bot_count,\n\n    '!topic': bot_topic,\n\n    '!hello': bot_hello}\n\n\n\n\n\ndef dispatch_bot_command(command, payload):\n\n    if command in commands:\n\n        my_function = commands[command]\n\n        my_function(payload)\n\n    else:\n\n        bot_say(f'Unknown command {command}')\n\n\n\ndispatch_bot_command('!hello', [])\n\ndispatch_bot_command('!topic', ['5'])\n\ndispatch_bot_command('!fake', [])",
        "question_text": "### Task 6: Chatbot command processor (15 marks)\n\nNow that we have a few different chatbot command behaviours implemented, let's start tying everything together. We will do this in two parts. In this task, we will write a function which *dispatches* commands. That is, it looks at a command and determines which bot function to call. In the next task, we will use this function to build a simple simulated chat system with user input.\n\nFirstly, create a dictionary constant which associates command names (strings) with function objects (command behaviours). For example, the key\/value for the hello command should be `'!hello': bot_hello`. Importantly, the value should be the function name only (no brackets afterwards), otherwise Python will attempt to call the function during definition of the dictionary. There should be five commands in total from previous tasks.\n\nNext, define a function called `dispatch_bot_command`. This function should have two parameters: the first is the name of the command (e.g. `\"!shout\"`), and the second is the payload (e.g. `[\"i\", \"love\", \"python\"]`). The code inside the function should check whether the command is in the dictionary constant. If it is, it should call the associated function. If it is not, the bot should say \"Unknown command\" and the name of the unrecognised command.\n\n_Hint: A function can be stored in a variable (or dictionary) just like any other kind of object, and can be called using that variable name instead of the function name. So if you retrieve a function from a dictionary and store it in a variable called `my_function`, you can call it using `my_function(...)`._\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\ndispatch_bot_command('!hello', [])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Hello world!\n<\/font>\n\n```python\ndispatch_bot_command('!topic', ['5'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Topic 5: Functions and Objects\n<\/font>\n\n```python\ndispatch_bot_command('!fake', [])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Unknown command !fake\n<\/font>\n\n#### Criteria\n\n- Correct definition of the dictionary constant. (5 marks)\n- Correct function definition. (2 marks)\n- Correct function behaviour. (4 marks)\n- Function uses the dictionary to look up the function object associated with a command name. (2 marks)\n- Appropriate output is produced for unknown commands. (2 marks)\n\n#### Your Solution\n\n# Write your solution here.\n\n\ndispatch_bot_command('!hello', [])     #=> Chatbot: Hello world!\ndispatch_bot_command('!topic', ['5'])  #=> Chatbot: Topic 5: Functions and Objects\ndispatch_bot_command('!fake', [])      #=> Chatbot: Unknown command !fake",
        "subquestion": "Function uses the dictionary to look up the function object associated with a command name",
        "rationale": "In this case, the code snippet correctly uses a dictionary to look up the function object associated with a command name. It checks if the command is in the dictionary and then calls the associated function if it is found. If the command is not in the dictionary, it outputs a message saying \"Unknown command\" along with the unrecognized command.",
        "student_mark_out_of_10": "10"
      },
      {
        "augmented": true,
        "code": "def bot_divide(payload):\n\n    # Implement the body of the bot_divide() function here.\n\n    grab_number1 = float(payload[0])\n\n    grab_number2 = float(payload[1])\n\n    divi_num = grab_number1\/grab_number2\n\n    output = f'{grab_number1:.1f} \/ {grab_number2:.0f} = {divi_num:.4f}'\n\n    bot_say(output)\n\n    pass\n\n\n\n\n\nbot_divide(['1.5', '5'])    #=> Chatbot: 1.5 \/ 5 = 0.3000\n\nbot_divide(['10.00', '2'])  #=> Chatbot: 10.00 \/ 2 = 5.0000\n\nbot_divide(['3', '7.0'])    #=> Chatbot: 3 \/ 7.0 = 0.4286",
        "question_text": "### Task 3: Chatbot !divide command (10 marks)\n\nYou will now implement the behaviour for a `!divide` chatbot command. For this command, you may assume that the user always provides two numbers, for example `!divide 1.5 5`. Like the previous task, you only need to define the function and we will worry about accepting user input later.\n\n_Hint: The `payload` argument for all of the chatbot commands will always be a list of strings. For the `bot_divide()` function specifically, the first element of this list will be the numerator (as a string) and the second element will be the denominator (as a string). In order to perform division, you will need to convert these elements to another type._\n\nWhen it comes to displaying the result, the chatbot must **show the full equation** with the answer inside it, not just the answer. The numerator and denominator must be displayed exactly as the user typed them, and the answer must be displayed to 4 decimal places. So, if the user wants to divide `10.00` by `2`, then the full chatbot output should be `10.00 \/ 2 = 5.0000`.\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\nbot_divide(['1.5', '5'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;1.5 \/ 5 = 0.3000\n<\/font>\n\n```python\nbot_divide(['10.00', '2'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;10.00 \/ 2 = 5.0000\n<\/font>\n\n```python\nbot_divide(['3', '7.0'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;3 \/ 7.0 = 0.4286\n<\/font>\n\n#### Criteria\n\n- Uses data from the payload to determine the numerator and denominator of the division. (3 marks)\n- Performs division using an appropriate expression. (1 mark)\n- Converts elements in the payload to an appropriate type. (2 marks)\n- Displays the result as an equation using the `bot_say()` function. (2 marks)\n- Displays the numerator and denominator in the output exactly as the user typed them, but the answer to 4 decimal places (see examples). (2 marks)",
        "subquestion": "Converts elements in the payload to an appropriate type",
        "rationale": "produce the student_mark_out_of_10. We first need to identify if the code snippet correctly converts the elements in the payload list to the appropriate type for division. This involves converting the numerator and denominator from strings to float values. The code snippet successfully does this by using the `float()` function on `payload[0]` and `payload[1]`. Therefore, it meets the criteria for this subquestion.",
        "student_mark_out_of_10": "10"
      },
      {
        "augmented": true,
        "code": "# Write your solution here.\n\n\n\n\n\ncommands = {'!hello': bot_hello, '!shout': bot_shout, '!divide': bot_divide, '!count': bot_count, '!topic': bot_topic}\n\n\n\n\n\ndef dispatch_bot_command(name, payload):\n\n\n\n    if name in commands:\n\n        commands[name](payload)\n\n\n\n    else:\n\n        fake = \"Unknown command \" + str(name)\n\n        bot_say(fake)\n\n\n\n\n\n    pass\n\n\n\n\n\n\n\n\n\ndispatch_bot_command('!hello', [])     #=> Chatbot: Hello world!\n\ndispatch_bot_command('!topic', ['5'])  #=> Chatbot: Topic 5: Functions and Objects\n\ndispatch_bot_command('!fake', [])      #=> Chatbot: Unknown command !fake",
        "question_text": "### Task 6: Chatbot command processor (15 marks)\n\nNow that we have a few different chatbot command behaviours implemented, let's start tying everything together. We will do this in two parts. In this task, we will write a function which *dispatches* commands. That is, it looks at a command and determines which bot function to call. In the next task, we will use this function to build a simple simulated chat system with user input.\n\nFirstly, create a dictionary constant which associates command names (strings) with function objects (command behaviours). For example, the key\/value for the hello command should be `'!hello': bot_hello`. Importantly, the value should be the function name only (no brackets afterwards), otherwise Python will attempt to call the function during definition of the dictionary. There should be five commands in total from previous tasks.\n\nNext, define a function called `dispatch_bot_command`. This function should have two parameters: the first is the name of the command (e.g. `\"!shout\"`), and the second is the payload (e.g. `[\"i\", \"love\", \"python\"]`). The code inside the function should check whether the command is in the dictionary constant. If it is, it should call the associated function. If it is not, the bot should say \"Unknown command\" and the name of the unrecognised command.\n\n_Hint: A function can be stored in a variable (or dictionary) just like any other kind of object, and can be called using that variable name instead of the function name. So if you retrieve a function from a dictionary and store it in a variable called `my_function`, you can call it using `my_function(...)`._\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\ndispatch_bot_command('!hello', [])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Hello world!\n<\/font>\n\n```python\ndispatch_bot_command('!topic', ['5'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Topic 5: Functions and Objects\n<\/font>\n\n```python\ndispatch_bot_command('!fake', [])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Unknown command !fake\n<\/font>\n\n#### Criteria\n\n- Correct definition of the dictionary constant. (5 marks)\n- Correct function definition. (2 marks)\n- Correct function behaviour. (4 marks)\n- Function uses the dictionary to look up the function object associated with a command name. (2 marks)\n- Appropriate output is produced for unknown commands. (2 marks)\n\n#### Your Solution\n\n# Write your solution here.\n\n\ndispatch_bot_command('!hello', [])     #=> Chatbot: Hello world!\ndispatch_bot_command('!topic', ['5'])  #=> Chatbot: Topic 5: Functions and Objects\ndispatch_bot_command('!fake', [])      #=> Chatbot: Unknown command !fake",
        "subquestion": "Correct function behaviour",
        "rationale": "produce the student_mark_out_of_10. We need to evaluate if the function `dispatch_bot_command` correctly checks if the command is in the dictionary constant and calls the associated function if it is, otherwise outputs \"Unknown command\" and the name of the unrecognized command. In this code snippet, the function `dispatch_bot_command` successfully performs this behavior as shown in the examples provided.",
        "student_mark_out_of_10": "10"
      },
      {
        "augmented": true,
        "code": "def bot_divide(payload):\n\n    # Implement the body of the bot_divide() function here.\n\n  numerator = float(payload[0])\n\n  denominator = float(payload[1])\n\n  result = numerator \/ denominator\n\n  equation = \"{} \/ {} = {:.4f}\".format(payload[0], payload[1], result)\n\n  bot_say(equation)\n\n  pass\n\n\n\n\n\nbot_divide(['1.5', '5'])    #=> Chatbot: 1.5 \/ 5 = 0.3000\n\nbot_divide(['10.00', '2'])  #=> Chatbot: 10.00 \/ 2 = 5.0000\n\nbot_divide(['3', '7.0'])    #=> Chatbot: 3 \/ 7.0 = 0.4286",
        "question_text": "### Task 3: Chatbot !divide command (10 marks)\n\nYou will now implement the behaviour for a `!divide` chatbot command. For this command, you may assume that the user always provides two numbers, for example `!divide 1.5 5`. Like the previous task, you only need to define the function and we will worry about accepting user input later.\n\n_Hint: The `payload` argument for all of the chatbot commands will always be a list of strings. For the `bot_divide()` function specifically, the first element of this list will be the numerator (as a string) and the second element will be the denominator (as a string). In order to perform division, you will need to convert these elements to another type._\n\nWhen it comes to displaying the result, the chatbot must **show the full equation** with the answer inside it, not just the answer. The numerator and denominator must be displayed exactly as the user typed them, and the answer must be displayed to 4 decimal places. So, if the user wants to divide `10.00` by `2`, then the full chatbot output should be `10.00 \/ 2 = 5.0000`.\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\nbot_divide(['1.5', '5'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;1.5 \/ 5 = 0.3000\n<\/font>\n\n```python\nbot_divide(['10.00', '2'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;10.00 \/ 2 = 5.0000\n<\/font>\n\n```python\nbot_divide(['3', '7.0'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;3 \/ 7.0 = 0.4286\n<\/font>\n\n#### Criteria\n\n- Uses data from the payload to determine the numerator and denominator of the division. (3 marks)\n- Performs division using an appropriate expression. (1 mark)\n- Converts elements in the payload to an appropriate type. (2 marks)\n- Displays the result as an equation using the `bot_say()` function. (2 marks)\n- Displays the numerator and denominator in the output exactly as the user typed them, but the answer to 4 decimal places (see examples). (2 marks)",
        "subquestion": "Converts elements in the payload to an appropriate type",
        "rationale": "In this case, the code snippet correctly converts the elements in the payload to float type before performing the division operation.",
        "student_mark_out_of_10": "10"
      },
      {
        "augmented": true,
        "code": "def bot_divide(payload):\n\n    num_flo = float(payload[0])\n\n    denom_flo = float(payload[1])\n\n    div = num_flo\/denom_flo\n\n    result = '{0:.4f}'.format(div)\n\n    message = '{0} \/ {1} = {2}'.format(num_flo, denom_flo, result)\n\n    bot_say(message)\n\n    pass\n\nbot_divide(['1.5', '5'])    #=> Chatbot: 1.5 \/ 5 = 0.3000\n\nbot_divide(['10.00', '2'])  #=> Chatbot: 10.00 \/ 2 = 5.0000\n\nbot_divide(['3', '7.0'])    #=> Chatbot: 3 \/ 7.0 = 0.4286",
        "question_text": "### Task 3: Chatbot !divide command (10 marks)\n\nYou will now implement the behaviour for a `!divide` chatbot command. For this command, you may assume that the user always provides two numbers, for example `!divide 1.5 5`. Like the previous task, you only need to define the function and we will worry about accepting user input later.\n\n_Hint: The `payload` argument for all of the chatbot commands will always be a list of strings. For the `bot_divide()` function specifically, the first element of this list will be the numerator (as a string) and the second element will be the denominator (as a string). In order to perform division, you will need to convert these elements to another type._\n\nWhen it comes to displaying the result, the chatbot must **show the full equation** with the answer inside it, not just the answer. The numerator and denominator must be displayed exactly as the user typed them, and the answer must be displayed to 4 decimal places. So, if the user wants to divide `10.00` by `2`, then the full chatbot output should be `10.00 \/ 2 = 5.0000`.\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\nbot_divide(['1.5', '5'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;1.5 \/ 5 = 0.3000\n<\/font>\n\n```python\nbot_divide(['10.00', '2'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;10.00 \/ 2 = 5.0000\n<\/font>\n\n```python\nbot_divide(['3', '7.0'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;3 \/ 7.0 = 0.4286\n<\/font>\n\n#### Criteria\n\n- Uses data from the payload to determine the numerator and denominator of the division. (3 marks)\n- Performs division using an appropriate expression. (1 mark)\n- Converts elements in the payload to an appropriate type. (2 marks)\n- Displays the result as an equation using the `bot_say()` function. (2 marks)\n- Displays the numerator and denominator in the output exactly as the user typed them, but the answer to 4 decimal places (see examples). (2 marks)",
        "subquestion": "Displays the result as an equation using the bot_say() function",
        "rationale": "produce the student_mark_out_of_10. We need to evaluate how well the code snippet displays the result as an equation using the `bot_say()` function. The code correctly formats the output message to display the division equation with the numerator, denominator, and result to 4 decimal places. It follows the specified format and includes the necessary elements.",
        "student_mark_out_of_10": "10"
      },
      {
        "augmented": true,
        "code": "def bot_divide(payload):\n\n    # Implement the body of the bot_divide() function here.\n\n    numerator_str = payload[0]\n\n    denominator_str = payload[1]\n\n\n\n    numer = float(numerator_str)\n\n    denom = float(denominator_str)\n\n\n\n    # Perform the division operation and return the result.\n\n\n\n    result = numer \/ denom\n\n\n\n    answer = f\"{numerator_str} \/ {denominator_str} = {result:.4f}\"\n\n\n\n    bot_say(answer)\n\n\n\n\n\nbot_divide(['1.5', '5'])    #=> Chatbot: 1.5 \/ 5 = 0.3000\n\nbot_divide(['10.00', '2'])  #=> Chatbot: 10.00 \/ 2 = 5.0000\n\nbot_divide(['3', '7.0'])    #=> Chatbot: 3 \/ 7.0 = 0.4286\n\n\n\n#added test\n\nbot_divide(['20','10'])     #=> Chatbot: 20 \/ 3 = 2.0000\n\nbot_divide(['0','2'])      #=> Chatbot: 0 \/ 2 = 0.0000\n\nbot_divide(['100','0']) # Causes error",
        "question_text": "### Task 3: Chatbot !divide command (10 marks)\n\nYou will now implement the behaviour for a `!divide` chatbot command. For this command, you may assume that the user always provides two numbers, for example `!divide 1.5 5`. Like the previous task, you only need to define the function and we will worry about accepting user input later.\n\n_Hint: The `payload` argument for all of the chatbot commands will always be a list of strings. For the `bot_divide()` function specifically, the first element of this list will be the numerator (as a string) and the second element will be the denominator (as a string). In order to perform division, you will need to convert these elements to another type._\n\nWhen it comes to displaying the result, the chatbot must **show the full equation** with the answer inside it, not just the answer. The numerator and denominator must be displayed exactly as the user typed them, and the answer must be displayed to 4 decimal places. So, if the user wants to divide `10.00` by `2`, then the full chatbot output should be `10.00 \/ 2 = 5.0000`.\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\nbot_divide(['1.5', '5'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;1.5 \/ 5 = 0.3000\n<\/font>\n\n```python\nbot_divide(['10.00', '2'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;10.00 \/ 2 = 5.0000\n<\/font>\n\n```python\nbot_divide(['3', '7.0'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;3 \/ 7.0 = 0.4286\n<\/font>\n\n#### Criteria\n\n- Uses data from the payload to determine the numerator and denominator of the division. (3 marks)\n- Performs division using an appropriate expression. (1 mark)\n- Converts elements in the payload to an appropriate type. (2 marks)\n- Displays the result as an equation using the `bot_say()` function. (2 marks)\n- Displays the numerator and denominator in the output exactly as the user typed them, but the answer to 4 decimal places (see examples). (2 marks)",
        "subquestion": "Displays the numerator and denominator in the output exactly as the user typed them, but the answer to 4 decimal places",
        "rationale": "produce the student_mark_out_of_10. We need to check if the code snippet correctly displays the numerator and denominator as provided by the user in the output. Additionally, we should verify if the answer is displayed to 4 decimal places. This subquestion is crucial for meeting the criteria outlined in the question.",
        "student_mark_out_of_10": "10"
      }
    ],
    "signature_instructions": "Grade a code snippet according to how well it answers a question and subquestion aspect on a scale of 0-10",
    "signature_prefix": "Student Mark Out Of 10:",
    "extended_signature_instructions": "Grade a code snippet according to how well it answers a question and subquestion aspect on a scale of 0-10",
    "extended_signature_prefix": "Student Mark Out Of 10:"
  }
}