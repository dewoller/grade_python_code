{
  "prog": {
    "lm": null,
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "code": "# Write your solution here.\n\ndictionary={'!hello': bot_hello,'!shout': bot_shout,'!divide': bot_divide,'!count': bot_count,'!topic': bot_topic}\n\ndef dispatch_bot_command(name,payload):\n\n    if name in dictionary.keys():\n\n      a=dictionary[name]\n\n      a(payload)\n\n    else:\n\n      bot_say('Unknown command '+name)\n\n\n\n\n\n\n\ndispatch_bot_command('!hello', [])     #=> Chatbot: Hello world!\n\ndispatch_bot_command('!topic', ['5'])  #=> Chatbot: Topic 5: Functions and Objects\n\ndispatch_bot_command('!fake', [])      #=> Chatbot: Unknown command !fake",
        "answer_code": "BOT_COMMANDS = {\n    '!hello': bot_hello,\n    '!shout': bot_shout,\n    '!divide': bot_divide,\n    '!count': bot_count,\n    '!topic': bot_topic,\n}\n\ndef dispatch_bot_command(command, payload):\n    if command in BOT_COMMANDS:\n        function = BOT_COMMANDS[command]\n        function(payload)\n    else:\n        bot_say(f'Unknown command: {command}')\n\ndispatch_bot_command('!topic', ['5'])",
        "question_text": "### Task 6: Chatbot command processor (15 marks)\n\nNow that we have a few different chatbot command behaviours implemented, let's start tying everything together. We will do this in two parts. In this task, we will write a function which *dispatches* commands. That is, it looks at a command and determines which bot function to call. In the next task, we will use this function to build a simple simulated chat system with user input.\n\nFirstly, create a dictionary constant which associates command names (strings) with function objects (command behaviours). For example, the key\/value for the hello command should be `'!hello': bot_hello`. Importantly, the value should be the function name only (no brackets afterwards), otherwise Python will attempt to call the function during definition of the dictionary. There should be five commands in total from previous tasks.\n\nNext, define a function called `dispatch_bot_command`. This function should have two parameters: the first is the name of the command (e.g. `\"!shout\"`), and the second is the payload (e.g. `[\"i\", \"love\", \"python\"]`). The code inside the function should check whether the command is in the dictionary constant. If it is, it should call the associated function. If it is not, the bot should say \"Unknown command\" and the name of the unrecognised command.\n\n_Hint: A function can be stored in a variable (or dictionary) just like any other kind of object, and can be called using that variable name instead of the function name. So if you retrieve a function from a dictionary and store it in a variable called `my_function`, you can call it using `my_function(...)`._\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\ndispatch_bot_command('!hello', [])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Hello world!\n<\/font>\n\n```python\ndispatch_bot_command('!topic', ['5'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Topic 5: Functions and Objects\n<\/font>\n\n```python\ndispatch_bot_command('!fake', [])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Unknown command !fake\n<\/font>\n\n#### Criteria\n\n- Correct definition of the dictionary constant. (5 marks)\n- Correct function definition. (2 marks)\n- Correct function behaviour. (4 marks)\n- Function uses the dictionary to look up the function object associated with a command name. (2 marks)\n- Appropriate output is produced for unknown commands. (2 marks)\n\n#### Your Solution\n\n# Write your solution here.\n\n\ndispatch_bot_command('!hello', [])     #=> Chatbot: Hello world!\ndispatch_bot_command('!topic', ['5'])  #=> Chatbot: Topic 5: Functions and Objects\ndispatch_bot_command('!fake', [])      #=> Chatbot: Unknown command !fake",
        "subquestion": "Function uses the dictionary to look up the function object associated with a command name",
        "rationale": "In this case, the code snippet correctly defines a dictionary associating command names with function objects and uses this dictionary to look up the function object associated with a command name. It then calls the function if it exists in the dictionary. The code snippet also handles the case where the command is not recognized by the bot. Overall, the code snippet addresses the subquestion aspect effectively.",
        "student_mark_out_of_10": "10"
      },
      {
        "augmented": true,
        "code": "def bot_count(payload):\n\n    # Convert elements in the payload to appropriate types\n\n    start = 1 if len(payload) == 1 else int(payload[0])\n\n    count = int(payload[0]) if len(payload) == 1 else int(payload[1])\n\n\n\n    # Use a loop to repeatedly call bot_say()\n\n    for i in range(start, start + count):\n\n        # Display the current number using bot_say()\n\n        bot_say(i)\n\n\n\n# Test calls\n\nbot_count(['10', '3'])  #=> Chatbot: 10, Chatbot: 11, Chatbot: 12\n\nprint(\"NEXT\")\n\nbot_count(['2'])        #=> Chatbot: 1, Chatbot: 2\n\nprint(\"NEXT\")\n\nbot_count(['5'])        #=> Chatbot: 1, Chatbot: 2, Chatbot: 3, Chatbot: 4, Chatbot: 5\n\n\n",
        "answer_code": "def bot_count(payload):\n    if len(payload) == 1:\n        from_number = 1\n        stop = int(payload[0]) + from_number\n    else:\n        from_number = int(payload[0])\n        stop = int(payload[1]) + from_number\n    for i in range(from_number, stop):\n        bot_say(i)\n\nbot_count(['10', '3'])\nbot_count(['2'])",
        "question_text": "### Task 4: Chatbot !count command (12 marks)\n\nImplement the behaviour for a `!count` chatbot command. Like `!divide`, you may assume that the user always provides two numbers. However, in this case they will also be whole numbers. The first of these numbers represents the value to start counting from. The second number represents how many times to count. The bot always counts by ones in ascending order (e.g. 2, 3, 4, 5 when starting at 2 and counting 4 times).\n\nIf the payload contains only one number, that number represents how many times to count and the bot should count up from 1. I recommend solving the task without this feature first, and then adding it afterwards.\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\nbot_count(['10', '3'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;10\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;11\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;12\n<\/font>\n\n```python\nbot_count(['2'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;1\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;2\n<\/font>\n\n#### Criteria\n\n- Correct function definition. (2 marks)\n- Converts elements in the payload to an appropriate type. (2 marks)\n- Uses a loop to repeatedly call `bot_say()`. (2 marks)\n- The loop repeats the correct number of times. (2 marks)\n- The correct numbers are displayed, with one number per chatbot message. (2 marks)\n- The bot correctly counts up from one when only a single value is provided in the payload. (2 marks)",
        "subquestion": "The bot correctly counts up from one when only a single value is provided in the payload",
        "rationale": "produce the student_mark_out_of_10. We first check if the length of the payload is 1, if so, we set the starting number to 1. Then, we correctly calculate the count based on the payload. Next, we use a loop to call bot_say() the correct number of times starting from the correct number. Finally, we test the function with the provided examples and additional cases to ensure it counts up from 1 when only a single value is provided.",
        "student_mark_out_of_10": "10"
      },
      {
        "code_section": "5",
        "subquestion_category": "list_def",
        "anon_id": 80,
        "code": "import random\n\n\n\ntopic_list = ['Algorithms and Flowcharts', 'Statements and Expressions', 'Booleans and Conditional Execution',\n\n              'Iteration', 'Functions and Objects', 'Strings and Files', 'Data Structures',\n\n              'Software Errors', 'Using Modules', 'Structuring and Documenting Code',\n\n              'Algorithm Design Strategies', 'Revision']\n\n\n\ndef bot_topic(payload):\n\n  if payload == []:\n\n    payload.append(random.randint(1, 12))                      # Adds random integer to payload list if initally empty\n\n  else:\n\n    payload = list(map(int,payload))                           # Converts all numbers to int's from str's\n\n  bot_say(f'Topic {payload[0]}: {topic_list[payload[0] - 1]}')\n\n\n\n\n\n\n\nbot_topic(['1'])  #=> Chatbot: Topic 1: Algorithms and Flowcharts\n\nbot_topic([])     #=> Random. For example, Chatbot: Topic 7: Data Structures",
        "comment": "topic_list is a list constant and should be named in ALL CAPS.",
        "student_mark": 3,
        "answer_text": "### Task 5: Chatbot `!topic` command\n",
        "answer_code": "import random\n\nTOPICS = [\n    'Algorithms and Flowcharts',\n    'Statements and Expressions',\n    'Booleans and Conditional Execution',\n    'Iteration',\n    'Functions and Objects',\n    'Strings and Files',\n    'Data Structures',\n    'Software Errors',\n    'Using Modules',\n    'Structuring and Documenting Code',\n    'Algorithm Design Strategies',\n    'Revision',\n]\n\ndef bot_topic(payload):\n    if len(payload) > 0:\n        number = int(payload[0])\n    else:\n        number = random.randint(1, 12)\n    topic_name = TOPICS[number - 1]\n    bot_say(f'Topic {number}: {topic_name}')\n\nbot_topic([])\nbot_topic(['1'])",
        "answer_desc": "Chatbot `!topic` command",
        "question_text": "### Task 5: Chatbot !topic command (15 marks)\n\nImplement behaviour for a `!topic` command which displays the name of one of the twelve topics in CSE1PE\/PES.\n\nYou can find the topic names by referring to the Subject Learning Guide or the weekly sections on LMS. For example, the name of topic 1 is \"Algorithms and Flowcharts\". You will need to define a list constant which contains all of the topic names in order. You are _not_ to include the word \"Topic\" or the topic numbers in the list (i.e. do not put \"Topic 1: Algorithms and Flowcharts\" in the list, put \"Algorithms and Flowcharts\" instead). The topic number should be added dynamically by the program instead (per the flowchart).\n\nThe behaviour of the `!topic` command is described in the flowchart below. Your solution should implement this algorithm as closely as possible.\n\n\nNote that one of the steps the flowchart involves generating a random number. You must import and make use of the `random` module from the Python Standard Library to do this. Consult [the documentation for the `random` module](https:\/\/docs.python.org\/3\/library\/random.html) and select an appropriate function to use for this part of your solution. For information about importing modules, refer to Topic 9.\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\nbot_topic(['1'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Topic 1: Algorithms and Flowcharts\n<\/font>\n\n```python\nbot_topic([])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Topic 7: Data Structures\n<\/font>\n\n(Note: for this last example the selected topic is meant to be random, so your code should display different topics across different runs).\n\n#### Criteria\n\n- Correct definition of the list constant. (4 marks)\n- Correct function definition. (2 marks)\n- Generates a random number in the correct range using the `random` module. (3 marks)\n- Indexes the list constant correctly to get the topic name. (2 marks)\n- Program behaviour otherwise matches the flowchart. (4 marks)\n\n#### Your Solution\n\n# Add your import statement here.\n\n# Define your constant here.\n\n# Write your bot_topic() function here.\n\n\nbot_topic(['1'])  #=> Chatbot: Topic 1: Algorithms and Flowcharts\nbot_topic([])     #=> Random. For example, Chatbot: Topic 7: Data Structures",
        "subquestion": "Correct definition of the list constant \u2013 list literal is correct",
        "subquestion_mark": 3,
        "student_mark_normalized": 10.0
      },
      {
        "code_section": "7",
        "subquestion_category": "dispatch",
        "anon_id": 131,
        "code": "def interactive_chat():\n\n    while True:\n\n        line = chat_input()\n\n        parts = line.split()\n\n        if not parts:\n\n            continue\n\n        command = parts[0].lower()\n\n        payload = parts[1:]\n\n        if command == '!quit':\n\n            break\n\n        else:\n\n            dispatch_bot_command(command, payload)\n\ninteractive_chat()",
        "comment": "Flowchart logic says to check for ! before anything else (bot shouldn\u2019t respond if there's no ! at the start of the input).",
        "student_mark": 4,
        "answer_text": "### Task 7: Interactive chat loop\n",
        "answer_code": "while True:\n    line = chat_input()\n    words = line.split(' ')\n    if len(words) == 0:\n        continue\n    command = words[0].lower()\n    if command[0] == '!':\n        if command == '!quit':\n            break\n        payload = words[1:]\n        dispatch_bot_command(command, payload)",
        "answer_desc": "Interactive chat loop",
        "question_text": "### Task 7: Interactive chat loop (20 marks)\n\nImplement an interactive loop which repeatedly asks for chat input, with the chatbot processing commands when appropriate. Your code should match the logic of the flowchart shown below:\n\n\nInstead of using the `input()` function to ask for user input, you should use the `chat_input()` function which has been defined for you already. This will result in a nicer looking chat log with colours. Here's an example of how to accept a line of input using this function:\n\n```python\nline = chat_input()\n```\n\nTo split the line into a list of individual words, use the `split()` string method. Here's an example:\n\n```python\n>>> 'These are words'.split(' ')\n['These', 'are', 'words']\n```\n\n_Note: If you run the code and it displays \"You:\" in blue text but no input text box appears, stop the code execution by clicking the stop symbol at the top-left of the cell and try running it again._\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n##### Example 1\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#000080\"><b>You:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;I'm here!\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#000080\"><b>You:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;!shout hooray\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;HOORAY\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#000080\"><b>You:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;!quit\n<\/font>\n\n##### Example 2\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#000080\"><b>You:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;!HELLO\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Hello world!\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#000080\"><b>You:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;!QUIT\n<\/font>\n\n#### Criteria\n\n- Repeatedly asks for user input using `chat_input()`. (4 marks)\n- Case insensitive command recognition. (2 marks)\n- Finishes gracefully on `!quit` command. (4 marks)\n- Uses the `dispatch_bot_command()` function to dispatch other commands. (4 marks)\n- Program behaviour otherwise matches the flowchart. (6 marks)",
        "subquestion": "Uses the dispatch_bot_command() function to dispatch other commands",
        "subquestion_mark": 4,
        "student_mark_normalized": 10.0
      },
      {
        "code_section": "7",
        "subquestion_category": "dispatch",
        "anon_id": 31,
        "code": "def interactive_chat():\n\n    while True:\n\n        line = chat_input().strip()\n\n\n\n        if line.startswith('!'):\n\n\n\n            parts = line.split(' ', 1)\n\n            command = parts[0]\n\n            payload = parts[1].split() if len(parts) > 1 else []\n\n\n\n            dispatch_bot_command(command, payload)\n\n\n\n        elif command == '!quit':\n\n                  break\n\n        else:\n\n            bot_say(\"Unknown command. Please start your command with '!'\")\n\n\n\ninteractive_chat()\n",
        "comment": "command variable is created in the if statement, but referenced in elif, crashing the program if a line doesn't start with !. !quit doesn't work, as if the command starts with !, the program goes into the if statement and doesn't reach the elif command == '!quit'. Flowchart logic:  if input is empty, continue (length of line). if input doesn\u2019t start with \u2018!\u2019, continue. split input into command (first element) and payload (everything else). if command = !quit, break. else: use previously defined dispatch_bot_command(command, payload) to run the command.",
        "student_mark": 4,
        "answer_text": "### Task 7: Interactive chat loop\n",
        "answer_code": "while True:\n    line = chat_input()\n    words = line.split(' ')\n    if len(words) == 0:\n        continue\n    command = words[0].lower()\n    if command[0] == '!':\n        if command == '!quit':\n            break\n        payload = words[1:]\n        dispatch_bot_command(command, payload)",
        "answer_desc": "Interactive chat loop",
        "question_text": "### Task 7: Interactive chat loop (20 marks)\n\nImplement an interactive loop which repeatedly asks for chat input, with the chatbot processing commands when appropriate. Your code should match the logic of the flowchart shown below:\n\n\nInstead of using the `input()` function to ask for user input, you should use the `chat_input()` function which has been defined for you already. This will result in a nicer looking chat log with colours. Here's an example of how to accept a line of input using this function:\n\n```python\nline = chat_input()\n```\n\nTo split the line into a list of individual words, use the `split()` string method. Here's an example:\n\n```python\n>>> 'These are words'.split(' ')\n['These', 'are', 'words']\n```\n\n_Note: If you run the code and it displays \"You:\" in blue text but no input text box appears, stop the code execution by clicking the stop symbol at the top-left of the cell and try running it again._\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n##### Example 1\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#000080\"><b>You:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;I'm here!\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#000080\"><b>You:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;!shout hooray\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;HOORAY\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#000080\"><b>You:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;!quit\n<\/font>\n\n##### Example 2\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#000080\"><b>You:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;!HELLO\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Hello world!\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#000080\"><b>You:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;!QUIT\n<\/font>\n\n#### Criteria\n\n- Repeatedly asks for user input using `chat_input()`. (4 marks)\n- Case insensitive command recognition. (2 marks)\n- Finishes gracefully on `!quit` command. (4 marks)\n- Uses the `dispatch_bot_command()` function to dispatch other commands. (4 marks)\n- Program behaviour otherwise matches the flowchart. (6 marks)",
        "subquestion": "Uses the dispatch_bot_command() function to dispatch other commands",
        "subquestion_mark": 4,
        "student_mark_normalized": 10.0
      },
      {
        "code_section": "7",
        "subquestion_category": "chat_input",
        "anon_id": 28,
        "code": "\n\n# Write your solution here.\n\ndef chat_input():\n\n    user_input = input(\"You: \")\n\n    return user_input\n\n\n\ndef split_line_into_words(line):\n\n    return line.split(' ')\n\n\n\ndef dispatch_bot_command(command, parameters):\n\n    command = command.lower()\n\n    if not command:\n\n        return \"Empty input\"\n\n    if command == \"!shout\":\n\n        return parameters.upper()\n\n    elif command == \"!hello\":\n\n        return \"Hello world!\"\n\n    elif command == \"!quit\":\n\n        return None\n\n    else:\n\n        return None\n\n\n\nwhile True:\n\n    line = chat_input()\n\n    words = split_line_into_words(line)\n\n    if words[0].lower() == \"!quit\":\n\n        break\n\n    elif words[0].startswith('!'):\n\n        command = words[0][1:]\n\n        parameters = ' '.join(words[1:])\n\n        response = dispatch_bot_command(command, parameters)\n\n        if response is None:\n\n            break\n\n        print(\"Chatbot:\")\n\n        print(response)\n\n    else:\n\n        print (\"N\/A\")",
        "comment": "Don\u2019t need to redefine chat_input(), bot_say() and dispatch_bot_command(), you just needed to make sure you ran the provided code each new runtime. The redefined dispatch_bot_command() is missing several commands. Not case insensitive. Command = word[0][1:] is removing the ! from the command, so none of the commands are recognised by dispatch_bot_command(). You want command = words[0]. Flowchart logic:  if input is empty, continue (length of line). if input doesn\u2019t start with \u2018!\u2019, continue. split input into command (first element) and payload (everything else). if command = !quit, break.",
        "student_mark": 1,
        "answer_text": "### Task 7: Interactive chat loop\n",
        "answer_code": "while True:\n    line = chat_input()\n    words = line.split(' ')\n    if len(words) == 0:\n        continue\n    command = words[0].lower()\n    if command[0] == '!':\n        if command == '!quit':\n            break\n        payload = words[1:]\n        dispatch_bot_command(command, payload)",
        "answer_desc": "Interactive chat loop",
        "question_text": "### Task 7: Interactive chat loop (20 marks)\n\nImplement an interactive loop which repeatedly asks for chat input, with the chatbot processing commands when appropriate. Your code should match the logic of the flowchart shown below:\n\n\nInstead of using the `input()` function to ask for user input, you should use the `chat_input()` function which has been defined for you already. This will result in a nicer looking chat log with colours. Here's an example of how to accept a line of input using this function:\n\n```python\nline = chat_input()\n```\n\nTo split the line into a list of individual words, use the `split()` string method. Here's an example:\n\n```python\n>>> 'These are words'.split(' ')\n['These', 'are', 'words']\n```\n\n_Note: If you run the code and it displays \"You:\" in blue text but no input text box appears, stop the code execution by clicking the stop symbol at the top-left of the cell and try running it again._\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n##### Example 1\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#000080\"><b>You:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;I'm here!\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#000080\"><b>You:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;!shout hooray\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;HOORAY\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#000080\"><b>You:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;!quit\n<\/font>\n\n##### Example 2\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#000080\"><b>You:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;!HELLO\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;Hello world!\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#000080\"><b>You:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;!QUIT\n<\/font>\n\n#### Criteria\n\n- Repeatedly asks for user input using `chat_input()`. (4 marks)\n- Case insensitive command recognition. (2 marks)\n- Finishes gracefully on `!quit` command. (4 marks)\n- Uses the `dispatch_bot_command()` function to dispatch other commands. (4 marks)\n- Program behaviour otherwise matches the flowchart. (6 marks)",
        "subquestion": "Repeatedly asks for user input using chat_input()",
        "subquestion_mark": 4,
        "student_mark_normalized": 2.5
      },
      {
        "code_section": "4",
        "subquestion_category": "display_num",
        "anon_id": 77,
        "code": "# Write your bot_count() function here.\n\ndef bot_count(payload):\n\n  num1 = int(payload[0])\n\n\n\n\n\n  if len(payload) == 2:\n\n    num2 = int(payload[1])\n\n  else:\n\n    num2 = int(payload[0])\n\n\n\n\n\n  for i in range(num1,num1 + num2):\n\n    bot_say(i)\n\n\n\nbot_count(['10', '3'])  #=> Chatbot: 10, Chatbot: 11, Chatbot: 12\n\nbot_count(['2'])        #=> Chatbot: 1, Chatbot: 2",
        "comment": NaN,
        "student_mark": 2,
        "answer_text": "### Task 4: Chatbot `!count` command\n",
        "answer_code": "def bot_count(payload):\n    if len(payload) == 1:\n        from_number = 1\n        stop = int(payload[0]) + from_number\n    else:\n        from_number = int(payload[0])\n        stop = int(payload[1]) + from_number\n    for i in range(from_number, stop):\n        bot_say(i)\n\nbot_count(['10', '3'])\nbot_count(['2'])",
        "answer_desc": "Chatbot `!count` command",
        "question_text": "### Task 4: Chatbot !count command (12 marks)\n\nImplement the behaviour for a `!count` chatbot command. Like `!divide`, you may assume that the user always provides two numbers. However, in this case they will also be whole numbers. The first of these numbers represents the value to start counting from. The second number represents how many times to count. The bot always counts by ones in ascending order (e.g. 2, 3, 4, 5 when starting at 2 and counting 4 times).\n\nIf the payload contains only one number, that number represents how many times to count and the bot should count up from 1. I recommend solving the task without this feature first, and then adding it afterwards.\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\nbot_count(['10', '3'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;10\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;11\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;12\n<\/font>\n\n```python\nbot_count(['2'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;1\n<br\/>&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;2\n<\/font>\n\n#### Criteria\n\n- Correct function definition. (2 marks)\n- Converts elements in the payload to an appropriate type. (2 marks)\n- Uses a loop to repeatedly call `bot_say()`. (2 marks)\n- The loop repeats the correct number of times. (2 marks)\n- The correct numbers are displayed, with one number per chatbot message. (2 marks)\n- The bot correctly counts up from one when only a single value is provided in the payload. (2 marks)",
        "subquestion": "The correct numbers are displayed, with one number per chatbot message",
        "subquestion_mark": 2,
        "student_mark_normalized": 10.0
      },
      {
        "code_section": "3",
        "subquestion_category": "display_nd",
        "anon_id": 1,
        "code": "def bot_divide(payload):\n\n    # Implement the body of the bot_divide() function here.\n\n    num = payload[0]\n\n    den = payload[1]\n\n    sol = f'{float(num) \/ float(den):.4f}'\n\n    payload = ' \/ '.join(payload) + ' = ' + str(sol)\n\n    pass\n\n    bot_say(payload)\n\n\n\n\n\nbot_divide(['1.5', '5'])    #=> Chatbot: 1.5 \/ 5 = 0.3000\n\nbot_divide(['10.00', '2'])  #=> Chatbot: 10.00 \/ 2 = 5.0000\n\nbot_divide(['3', '7.0'])    #=> Chatbot: 3 \/ 7.0 = 0.4286",
        "comment": NaN,
        "student_mark": 2,
        "answer_text": "### Task 3: Chatbot `!divide` command\n",
        "answer_code": "def bot_divide(payload):\n    numerator = float(payload[0])\n    denominator = float(payload[1])\n    bot_say(f'{payload[0]} \/ {payload[1]} = {numerator \/ denominator:.4f}')\n\nbot_divide(['1.5', '5'])",
        "answer_desc": "Chatbot `!divide` command",
        "question_text": "### Task 3: Chatbot !divide command (10 marks)\n\nYou will now implement the behaviour for a `!divide` chatbot command. For this command, you may assume that the user always provides two numbers, for example `!divide 1.5 5`. Like the previous task, you only need to define the function and we will worry about accepting user input later.\n\n_Hint: The `payload` argument for all of the chatbot commands will always be a list of strings. For the `bot_divide()` function specifically, the first element of this list will be the numerator (as a string) and the second element will be the denominator (as a string). In order to perform division, you will need to convert these elements to another type._\n\nWhen it comes to displaying the result, the chatbot must **show the full equation** with the answer inside it, not just the answer. The numerator and denominator must be displayed exactly as the user typed them, and the answer must be displayed to 4 decimal places. So, if the user wants to divide `10.00` by `2`, then the full chatbot output should be `10.00 \/ 2 = 5.0000`.\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\nbot_divide(['1.5', '5'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;1.5 \/ 5 = 0.3000\n<\/font>\n\n```python\nbot_divide(['10.00', '2'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;10.00 \/ 2 = 5.0000\n<\/font>\n\n```python\nbot_divide(['3', '7.0'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;3 \/ 7.0 = 0.4286\n<\/font>\n\n#### Criteria\n\n- Uses data from the payload to determine the numerator and denominator of the division. (3 marks)\n- Performs division using an appropriate expression. (1 mark)\n- Converts elements in the payload to an appropriate type. (2 marks)\n- Displays the result as an equation using the `bot_say()` function. (2 marks)\n- Displays the numerator and denominator in the output exactly as the user typed them, but the answer to 4 decimal places (see examples). (2 marks)",
        "subquestion": "Displays the numerator and denominator in the output exactly as the user typed them, but the answer to 4 decimal places",
        "subquestion_mark": 2,
        "student_mark_normalized": 10.0
      },
      {
        "code_section": "3",
        "subquestion_category": "div",
        "anon_id": 184,
        "code": "def bot_divide(payload):\n\n    # Implement the body of the bot_divide() function here.\n\n    divisor = float(payload[0])\n\n    dividend = float(payload[1])\n\n    result = divisor \/ dividend\n\n    bot_say(f'{divisor} \/ {dividend} = {result:.4f}')\n\n\n\nbot_divide(['1.5', '5'])   #=> Chatbot: 1.5 \/ 5 = 0.3000\n\nbot_divide(['10.00', '2'])  #=> Chatbot: 10.00 \/ 2 = 5.0000\n\nbot_divide(['3', '7.0'])    #=> Chatbot: 3 \/ 7.0 = 0.4286",
        "comment": "Only answer was for 4dp, the user inputs were to be exactly as typed (eg. 3, not 3.0)",
        "student_mark": 1,
        "answer_text": "### Task 3: Chatbot `!divide` command\n",
        "answer_code": "def bot_divide(payload):\n    numerator = float(payload[0])\n    denominator = float(payload[1])\n    bot_say(f'{payload[0]} \/ {payload[1]} = {numerator \/ denominator:.4f}')\n\nbot_divide(['1.5', '5'])",
        "answer_desc": "Chatbot `!divide` command",
        "question_text": "### Task 3: Chatbot !divide command (10 marks)\n\nYou will now implement the behaviour for a `!divide` chatbot command. For this command, you may assume that the user always provides two numbers, for example `!divide 1.5 5`. Like the previous task, you only need to define the function and we will worry about accepting user input later.\n\n_Hint: The `payload` argument for all of the chatbot commands will always be a list of strings. For the `bot_divide()` function specifically, the first element of this list will be the numerator (as a string) and the second element will be the denominator (as a string). In order to perform division, you will need to convert these elements to another type._\n\nWhen it comes to displaying the result, the chatbot must **show the full equation** with the answer inside it, not just the answer. The numerator and denominator must be displayed exactly as the user typed them, and the answer must be displayed to 4 decimal places. So, if the user wants to divide `10.00` by `2`, then the full chatbot output should be `10.00 \/ 2 = 5.0000`.\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\nbot_divide(['1.5', '5'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;1.5 \/ 5 = 0.3000\n<\/font>\n\n```python\nbot_divide(['10.00', '2'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;10.00 \/ 2 = 5.0000\n<\/font>\n\n```python\nbot_divide(['3', '7.0'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;3 \/ 7.0 = 0.4286\n<\/font>\n\n#### Criteria\n\n- Uses data from the payload to determine the numerator and denominator of the division. (3 marks)\n- Performs division using an appropriate expression. (1 mark)\n- Converts elements in the payload to an appropriate type. (2 marks)\n- Displays the result as an equation using the `bot_say()` function. (2 marks)\n- Displays the numerator and denominator in the output exactly as the user typed them, but the answer to 4 decimal places (see examples). (2 marks)",
        "subquestion": "Performs division using an appropriate expression",
        "subquestion_mark": 1,
        "student_mark_normalized": 10.0
      },
      {
        "code_section": "3",
        "subquestion_category": "display_nd",
        "anon_id": 141,
        "code": "def bot_divide(payload):\n\n  # Implement the body of the bot_divide() function here.\n\n  bot_say(f\"{payload[0]} \/ {payload[1]} = {float(payload[0]) \/ float(payload[1]):.4f}\")\n\n\n\n\n\nbot_divide(['1.5', '5'])        #=> Chatbot: 1.5 \/ 5 = 0.3000\n\nbot_divide(['10.00', '2'])      #=> Chatbot: 10.00 \/ 2 = 5.0000\n\nbot_divide(['3', '7.0'])        #=> Chatbot: 3 \/ 7.0 = 0.4286\n\nbot_divide([\"49.67\", \"7.782\"])  #=> Chatbot: 49.67 \/ 7.782 = 6.3827",
        "comment": NaN,
        "student_mark": 2,
        "answer_text": "### Task 3: Chatbot `!divide` command\n",
        "answer_code": "def bot_divide(payload):\n    numerator = float(payload[0])\n    denominator = float(payload[1])\n    bot_say(f'{payload[0]} \/ {payload[1]} = {numerator \/ denominator:.4f}')\n\nbot_divide(['1.5', '5'])",
        "answer_desc": "Chatbot `!divide` command",
        "question_text": "### Task 3: Chatbot !divide command (10 marks)\n\nYou will now implement the behaviour for a `!divide` chatbot command. For this command, you may assume that the user always provides two numbers, for example `!divide 1.5 5`. Like the previous task, you only need to define the function and we will worry about accepting user input later.\n\n_Hint: The `payload` argument for all of the chatbot commands will always be a list of strings. For the `bot_divide()` function specifically, the first element of this list will be the numerator (as a string) and the second element will be the denominator (as a string). In order to perform division, you will need to convert these elements to another type._\n\nWhen it comes to displaying the result, the chatbot must **show the full equation** with the answer inside it, not just the answer. The numerator and denominator must be displayed exactly as the user typed them, and the answer must be displayed to 4 decimal places. So, if the user wants to divide `10.00` by `2`, then the full chatbot output should be `10.00 \/ 2 = 5.0000`.\n\n#### Examples for testing\n\nUse the examples below, as well as your own examples, to test your code. The output from your chatbot should exactly match what is shown here.\n\n```python\nbot_divide(['1.5', '5'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;1.5 \/ 5 = 0.3000\n<\/font>\n\n```python\nbot_divide(['10.00', '2'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;10.00 \/ 2 = 5.0000\n<\/font>\n\n```python\nbot_divide(['3', '7.0'])\n```\n\n<font face=\"monospace\">\n&nbsp;&nbsp;&nbsp;<font color=\"#800000\"><b>Chatbot:<\/b><\/font>\n<br\/>&nbsp;&nbsp;&nbsp;3 \/ 7.0 = 0.4286\n<\/font>\n\n#### Criteria\n\n- Uses data from the payload to determine the numerator and denominator of the division. (3 marks)\n- Performs division using an appropriate expression. (1 mark)\n- Converts elements in the payload to an appropriate type. (2 marks)\n- Displays the result as an equation using the `bot_say()` function. (2 marks)\n- Displays the numerator and denominator in the output exactly as the user typed them, but the answer to 4 decimal places (see examples). (2 marks)",
        "subquestion": "Displays the numerator and denominator in the output exactly as the user typed them, but the answer to 4 decimal places",
        "subquestion_mark": 2,
        "student_mark_normalized": 10.0
      }
    ],
    "signature_instructions": "Grade a code snippet according to how well it answers a question and subquestion aspect on a scale of 0-10. Use the gold standard to guide your grading. ",
    "signature_prefix": "Student Mark Out Of 10:",
    "extended_signature_instructions": "Grade a code snippet according to how well it answers a question and subquestion aspect on a scale of 0-10. Use the gold standard to guide your grading.",
    "extended_signature_prefix": "Student Mark Out Of 10:"
  }
}